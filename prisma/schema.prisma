generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

// User Management
model User {
  id               Int      @id @default(autoincrement())
  firstName        String   @db.VarChar(50)
  lastName         String?  @db.VarChar(50)
  email            String   @unique
  avatar           String?  @db.VarChar(255)
  age              Int?
  password         String   @db.VarChar(255)
  phoneNumber      String?  @db.VarChar(20)
  isActive         Boolean  @default(true)
  verificationCode String?  @db.VarChar(255)
  role             Role?    @default(USER)
  gender           Gender?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  addresses    Address[]
  reviews      Review[]
  carts        Cart[]
  orders       Order[]
  adminProfile Admin?
  token        Token[]
}

model Admin {
  id              Int  @id @default(autoincrement())
  userId          Int  @unique
  permissionLevel Int // 0 = super admin, 1 = editor, 2 = viewer
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id           String   @id @default(uuid())
  userId       Int // this represent the userId
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

// seperate the wilaya from the address table
model Address {
  id           Int     @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String?
  commune      String
  wilayaId     Int
  postalCode   String
  country      String
  phoneNumber  String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  wilaya Wilaya  @relation(fields: [wilayaId], references: [id], onDelete: Cascade)
  orders Order[]
}

// Product Management
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  image       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String?  @db.Text
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  website     String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

//! dont know if we should insert an image cover or not
model Product {
  id             Int      @id @default(autoincrement())
  sku            String?  @unique @db.VarChar(50)
  name           String   @db.VarChar(255)
  description    String   @db.Text
  price          Decimal  @db.Decimal(10, 2)
  imageCover     String   @db.VarChar(255)
  images         String[]
  sold           Int      @default(0)
  isBestSeller   Boolean  @default(false)
  isFavorite     Boolean  @default(false)
  gender         Gender?  @default(UNISEX)
  isPromo        Boolean  @default(false)
  isFreeShipping Boolean  @default(false)

  // Optional fields
  priceAfterDiscount Decimal? @db.Decimal(10, 2)

  // Relations
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  brandId    Int?
  brand      Brand?    @relation(fields: [brandId], references: [id])
  supplierId Int?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  // Child relations
  reviews              Review[]
  productSpecification ProductSpecification[]

  // Implicit Many-to-Many Relationship with Tags
  tags Tag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  // Implicit Many-to-Many Relationship with Products
  products Product[]
}

model ProductSpecification {
  id         Int  @id @default(autoincrement())
  productId  Int
  sizeId     Int?
  colorId    Int?
  materialId Int?

  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @updatedAt
  deletedAt  DateTime?

  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  size             Size?             @relation(fields: [sizeId], references: [id])
  color            Color?            @relation(fields: [colorId], references: [id])
  material         Material?         @relation(fields: [materialId], references: [id])
  productInventory ProductInventory?
  cartItem         CartItem[]
  orderItem        OrderItem[]
}

model ProductInventory {
  id                     Int @id @default(autoincrement())
  productSpecificationId Int @unique
  quantity               Int

  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @updatedAt
  deletedAt  DateTime?

  productSpecification ProductSpecification @relation(fields: [productSpecificationId], references: [id], onDelete: Cascade)
}

model Size {
  id                   Int                    @id @default(autoincrement())
  name                 String
  productSpecification ProductSpecification[]
}

model Color {
  id                   Int                    @id @default(autoincrement())
  name                 String
  productSpecification ProductSpecification[]
}

model Material {
  id                   Int                    @id @default(autoincrement())
  name                 String
  productSpecification ProductSpecification[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int      @default(1)
  reviewText String   @db.Text
  userId     Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Shopping Management
model Cart {
  id                      Int      @id @default(autoincrement())
  userId                  Int?
  sessionId               String?  @unique
  totalPrice              Decimal  @db.Decimal(10, 2)
  totalPriceAfterDiscount Decimal? @db.Decimal(10, 2)
  couponId                Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lastActivityAt          DateTime @default(now())

  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
  cartItems CartItem[]

  @@index([sessionId])
  @@index([userId])
}

model CartItem {
  id                     Int @id @default(autoincrement())
  cartId                 Int
  productSpecificationId Int
  quantity               Int @default(1)

  cart                 Cart                 @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productSpecification ProductSpecification @relation(fields: [productSpecificationId], references: [id], onDelete: Cascade)

  @@unique([cartId, productSpecificationId])
}

model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique
  userId      Int?
  addressId   Int
  shippingId  Int

  // Pricing
  subtotal       Decimal  @db.Decimal(10, 2)
  shippingCost   Decimal  @db.Decimal(10, 2)
  taxAmount      Decimal? @db.Decimal(10, 2)
  discountAmount Decimal? @db.Decimal(10, 2)
  totalAmount    Decimal  @db.Decimal(10, 2)

  // Status
  status        OrderStatus       @default(PENDING)
  paymentStatus PaymentStatus     @default(PENDING)
  paymentMethod PaymentMethodType @default(CASH)

  // Dates
  paidAt      DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  address    Address     @relation(fields: [addressId], references: [id])
  shipping   Shipping    @relation(fields: [shippingId], references: [id])
  orderItems OrderItem[]
}

model Shipping {
  id       Int    @id @default(autoincrement())
  company  String
  wilayaId Int?
  amount   Int

  wilaya Wilaya? @relation(fields: [wilayaId], references: [id])
  order  Order[]
}

model Wilaya {
  id       Int        @id @default(autoincrement())
  code     Int
  name     String
  shipping Shipping[]
  Address  Address[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CASH
  CARD
}

model OrderItem {
  id                     Int     @id @default(autoincrement())
  orderId                Int
  productSpecificationId Int
  quantity               Int
  unitPrice              Decimal @db.Decimal(10, 2)

  order                Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productSpecification ProductSpecification @relation(fields: [productSpecificationId], references: [id], onDelete: Cascade)
}

// Payment Management
// model PaymentMethod {
//   id        Int       @id @default(autoincrement())
//   userId    Int
//   type      String // e.g., "credit_card", "paypal"
//   provider  String // e.g., "visa", "mastercard"
//   accountNo String
//   expiry    DateTime?
//   isDefault Boolean   @default(false)

//   user   User    @relation(fields: [userId], references: [id])
//   orders Order[]
// }

model Coupon {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  discount  Decimal    @db.Decimal(10, 2)
  type      CouponType
  maxUses   Int?
  usedCount Int        @default(0)
  startDate DateTime
  endDate   DateTime
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  carts Cart[]
}

enum CouponType {
  PERCENTAGE
  FIXED
}

// Supplier Management
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @unique
  phone     String?
  website   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model CompanyInfo {
  id            Int       @id @default(autoincrement())
  companyName   String    @default("")
  address       String    @default("")
  city          String    @default("")
  state         String    @default("")
  zipCode       String    @default("")
  country       String    @default("")
  phoneNumber   String    @default("")
  email         String    @unique @default("")
  websiteURL    String    @default("")
  visitingHours String    @default("")
  description   String    @default("")
  facebook      String    @default("")
  instagram     String    @default("")
  twitter       String    @default("")
  linkedIn      String    @default("")
  latitude      Float?
  longitude     Float?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now())
}

model Highlight {
  id           Int      @id @default(autoincrement())
  title        String   @default("")
  description  String?
  image        String?  @db.VarChar(255)
  isBestSeller Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contact {
  id          Int    @id @default(autoincrement())
  family_name String
  name        String
  email       String
  phone       String
  description String
}

// ********************************* VIEW MODELS *********************************

view ProductInfo {
  productId                Int       @unique
  sku                      String?
  productName              String
  description              String
  price                    Decimal
  imageCover               String
  images                   String[]
  sold                     Int
  isBestSeller             Boolean
  gender                   Gender?
  isPromo                  Boolean
  isFreeShipping           Boolean
  priceAfterDiscount       Decimal?
  categoryId               Int
  brandId                  Int?
  supplierId               Int?
  productSpecificationId   Int?
  size                     String?
  color                    String?
  material                 String?
  product_spec_created_at  DateTime?
  product_spec_modified_at DateTime?
  product_spec_deleted_at  DateTime?
  brandName                String?
  brandDescription         String?
  supplierName             String?
  supplierPhone            String?
  supplierEmail            String?
}

view ProductQuantity {
  productId         Int      @unique
  productSku        String?
  productName       String
  description       String
  price             Decimal
  imageCover        String
  sold              Int
  brandName         String?
  supplierName      String?
  remainingQuantity Decimal?
}

view ProductQuantityDetails {
  productSpecificationId Int      @unique
  productId              Int
  productSku             String?
  productName            String
  description            String
  price                  Decimal
  imageCover             String
  sold                   Int
  brandName              String?
  supplierName           String?
  remainingQuantity      Decimal?
  size                   String?
  color                  String?
  material               String?
}

view OrderDetails {
  orderId            Int               @unique
  orderNumber        String
  customerName       String
  customerLastName   String?
  customerEmail      String
  phoneNumber        String?
  shippingAddress    String
  shippingCommune    String
  shippingWilayaId   Int
  shippingWilayaName String
  shippingCompany    String
  subtotal           Decimal
  shippingCost       Decimal
  taxAmount          Decimal?
  discountAmount     Decimal?
  totalAmount        Decimal
  status             OrderStatus
  paymentStatus      PaymentStatus
  paymentMethod      PaymentMethodType
  createdAt          DateTime
  paidAt             DateTime?
  shippedAt          DateTime?
  deliveredAt        DateTime?
}

view OrderItemDetails {
  orderId                Int
  orderNumber            String
  customerName           String
  customerEmail          String
  shippingWilayaName     String
  shippingCompany        String
  status                 OrderStatus
  productSpecificationId Int
  orderItemQuantity      Int
  orderItemUnitPrice     Decimal
  totalPrice             Decimal
  productId              Int
  productName            String
  productSku             String?
  productDescription     String
  productImageCover      String
  isFreeShipping         Boolean
  isPromo                Boolean
  size                   String?
  color                  String?
  material               String?
  brandName              String?
  supplierName           String?
  createdAt              DateTime
  paidAt                 DateTime?
  shippedAt              DateTime?
  deliveredAt            DateTime?

  @@id([orderId, productSpecificationId]) // Define the composite primary key
}

view SupplierProduct {
  supplierId         Int     @unique
  supplierName       String
  supplierEmail      String?
  supplierPhone      String?
  supplierWebsite    String?
  productId          Int
  productSku         String?
  productName        String
  productDescription String
  productPrice       Decimal @db.Decimal(10, 2)
  productImageCover  String
}
