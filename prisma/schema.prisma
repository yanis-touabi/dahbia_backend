generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

// User Management
model User {
  id               Int      @id @default(autoincrement())
  firstName        String   @db.VarChar(50)
  lastName         String?  @db.VarChar(50)
  email            String   @unique
  avatar           String?  @db.VarChar(255)
  age              Int?
  password         String   @db.VarChar(255)
  phoneNumber      String?  @db.VarChar(20)
  isActive         Boolean  @default(true)
  verificationCode String?  @db.VarChar(255)
  role             Role     @default(USER)
  gender           Gender?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  addresses    Address[]
  reviews      Review[]
  carts        Cart[]
  orders       Order[]
  adminProfile Admin?
  Token        Token[]
}

model Admin {
  id              Int  @id @default(autoincrement())
  userId          Int  @unique
  permissionLevel Int // 0 = super admin, 1 = editor, 2 = viewer
  user            User @relation(fields: [userId], references: [id])
}

model Token {
  id           String   @id @default(uuid())
  userId       Int // this represent the userId
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Address {
  id           Int     @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String?
  commune      String
  willaya      String
  postalCode   String
  country      String
  phoneNumber  String?

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

// Product Management
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String?  @db.Text
  image       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String?  @db.Text
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  website     String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model Product {
  id           Int      @id @default(autoincrement())
  sku          String?  @unique @db.VarChar(50)
  name         String   @db.VarChar(255)
  description  String   @db.Text
  price        Decimal  @db.Decimal(10, 2)
  imageCover   String   @db.VarChar(255)
  images       String[]
  sold         Int      @default(0)
  isBestSeller Boolean  @default(false)
  gender       Gender?  @default(UNISEX)

  // Optional fields
  priceAfterDiscount Decimal? @db.Decimal(10, 2)
  colors             String[]

  // Relations
  categoryId    Int
  category      Category         @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory   SubCategory?     @relation(fields: [subCategoryId], references: [id])
  brandId       Int?
  brand         Brand?           @relation(fields: [brandId], references: [id])
  supplierId    Int?
  supplier      Supplier?        @relation(fields: [supplierId], references: [id])
  inventoryId   Int              @unique
  inventory     ProductInventory @relation(fields: [inventoryId], references: [id], onDelete: Restrict)

  // Child relations
  specifications ProductSpecification[]
  reviews        Review[]
  cartItems      CartItem[]
  orderItems     OrderItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductInventory {
  id         Int       @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime  @default(now())
  modifiedAt DateTime? @updatedAt
  deletedAt  DateTime?

  product Product?
}

model ProductSpecification {
  id        Int     @id @default(autoincrement())
  key       String // e.g., "size", "color", "material"
  value     String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int      @default(1)
  reviewText String   @db.Text
  userId     Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Shopping Management
model Cart {
  id                      Int      @id @default(autoincrement())
  userId                  Int
  totalPrice              Decimal  @db.Decimal(10, 2)
  totalPriceAfterDiscount Decimal? @db.Decimal(10, 2)
  couponId                Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  color     String?

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique
  userId      Int?
  addressId   Int
  shippingId  Int

  // Pricing
  subtotal       Decimal  @db.Decimal(10, 2)
  taxAmount      Decimal? @db.Decimal(10, 2)
  discountAmount Decimal? @db.Decimal(10, 2)
  totalAmount    Decimal  @db.Decimal(10, 2)

  // Status
  status        OrderStatus       @default(PENDING)
  paymentStatus PaymentStatus     @default(PENDING)
  paymentMethod PaymentMethodType @default(CASH)

  // Dates
  paidAt      DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  address    Address     @relation(fields: [addressId], references: [id])
  shipping   Shipping    @relation(fields: [shippingId], references: [id])
  orderItems OrderItem[]
}

model Shipping {
  id       Int    @id @default(autoincrement())
  company  String
  wilayaId Int
  amount   Int

  wilaya wilaya  @relation(fields: [wilayaId], references: [id])
  Order  Order[]
}

model wilaya {
  id       Int        @id @default(autoincrement())
  code     Int
  name     String
  Shipping Shipping[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CASH
  CARD
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  color     String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Payment Management
// model PaymentMethod {
//   id        Int       @id @default(autoincrement())
//   userId    Int
//   type      String // e.g., "credit_card", "paypal"
//   provider  String // e.g., "visa", "mastercard"
//   accountNo String
//   expiry    DateTime?
//   isDefault Boolean   @default(false)

//   user   User    @relation(fields: [userId], references: [id])
//   orders Order[]
// }

model Coupon {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  discount  Decimal    @db.Decimal(10, 2)
  type      CouponType
  maxUses   Int?
  usedCount Int        @default(0)
  startDate DateTime
  endDate   DateTime
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  carts Cart[]
}

enum CouponType {
  PERCENTAGE
  FIXED
}

// Supplier Management
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @unique
  phone     String?
  website   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}
